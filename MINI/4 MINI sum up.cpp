#include<stdio.h> 
#include<math.h>
#include<time.h>
#include <sys/stat.h>
#include<stdlib.h>
#define u32 unsigned __int32
#define u16 unsigned __int16
#define u8 unsigned __int8
void AES_S_pu(double Walsh[256][256],int sign_S[256][256],int wt2[256]) 
{
	static int S[256]={	
	0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
	0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
	0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
	0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
	0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
	0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
	0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
	0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
	0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
	0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
	0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
	0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
	0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
	0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
	0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
	0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16
	};
	int a,b,x,z;
	int pu[256][256];

	for(a=0;a<256;a++) for(b=0;b<256;b++)
	{
		sign_S[a][b] = 0;
		pu[a][b] = 0;
		for(x=0;x<256;x++) 
		{
			z = wt2[(a&x) ^ (b&S[x])];
			if(z) pu[a][b] --;
			else  pu[a][b] ++;
		}
	}
	for(a=0;a<256;a++) for(b=0;b<256;b++) 
	{
		if(pu[a][b]>0)		 sign_S[a][b] = 1;
		else if(pu[a][b]<0) {sign_S[a][b] = -1; pu[a][b] = -pu[a][b];}

		if(pu[a][b]==0) Walsh[a][b] = 4321;
		else Walsh[a][b] = 8 - (log(pu[a][b])/log(2));  
	}
}

void shift(u32 a[4],u32 b[4])  
{

	int z[16] = {	0, 5,10,15,
					4, 9,14, 3,
					8,13, 2, 7,
					12,1,6,11};
	u32 A[16],B[16];
	int i,j;
	int D[16][16];

	for(i=0;i<16;i++) 	for(j=0;j<16;j++) D[i][j] = 0;
	for(i=0;i<16;i++) 	D[z[i]][i] = 1; 
	for(i=0;i<4;i++) 	for(j=0;j<4;j++)  A[4*i+j] = (a[i]>>(8*j))&255;	
	for(i=0;i<16;i++) 	
	{
		B[i] = 0;
		for(j=0;j<16;j++) if(D[i][j]) B[i] ^= A[j];
	}
	for(i=0;i<4;i++) 	
	{ 
		b[i] = 0; 
		for(j=0;j<4;j++)  b[i] ^= B[4*i+j]<<(8*j);
	}	
}
void liehunhe(u32 D[32])  
{
	static int mix[4][4] = {  2, 3, 1, 1,
							  1, 2, 3, 1,
							  1, 1, 2, 3,
							  3, 1, 1, 2}; 
	int M[4][256];		
	u32 e,y,z,A[4];
	int i,j,k;	
	
	for(y=0;y<256;y++) 
	{
		M[0][y] = 0;			M[1][y] = y;
		z =     ((y<<1)&255) ^ (y&128? 0x1b:0);		M[2][y] = z;	
		z ^= y;										M[3][y] = z;	
	}

	for(k=0;k<32;k++) 
	{
		e = 1<<k;
		for(i=0;i<4;i++) A[i] = (e>>(8*i))&255;
		y = 0;
		for(i=0;i<4;i++)
		{
			z = 0;
			for(j=0;j<4;j++) z ^= M[mix[i][j]][A[j]];
			y ^= z<<(8*i);
		}
		D[k] = y; 
	}
}

u32 liehunhe_mask(u32 b,u32 D[32],int wt2[256]) 
{	

	u32 y,z;
	int i,k;

	z = 0;
	for(i=0;i<32;i++)
	{
		y = D[i]&b;
		k = wt2[y&255] ^ wt2[(y>>8)&255] ^ wt2[(y>>16)&255] ^ wt2[(y>>24)&255];
		z ^= k<<i;
	}
	return z;
}
double pu_AES_round(u32 a[4], u32 b[4],double pu[256][256],int sign_S[256][256],int sign[2],u32 D[32],int wt2[256])
{				  
	u32 d[4],c[4]; 
	int i,j,A[16],B[16];
	double pior;

	for(i=0;i<4;i++) d[i] = liehunhe_mask(b[i],D,wt2); 

	shift(d,c); 

	for(i=0;i<4;i++) for(j=0;j<4;j++)
	{
		A[4*i+j] = (a[i]>>(8*j))&255;
		B[4*i+j] = (c[i]>>(8*j))&255;
	}
	pior = 0;	
	sign[0] = 1;
	for(i=0;i<16;i++) 
	{
		if(pu[A[i]][B[i]]==4321) 
		{ 
			sign[0] = 0; 
			return 4321; 
		}
		else 
		{ 
			pior += pu[A[i]][B[i]]; 
			sign[0] *= sign_S[A[i]][B[i]];
		}
	}
	return pior;
}
void Solve_b3tob1(u32 b3[4],u32 c1[4],u32 b1[4]) 
{							
    u16 G[8][16] = {1,0,0,1,0,0,1,1,1,0,1,0,1,1,0,0,
				    1,1,0,1,0,1,0,0,1,0,1,0,1,0,0,1,
				    1,0,0,0,1,1,0,1,0,0,1,0,1,0,1,1,
				    1,0,1,0,1,1,0,1,0,1,0,1,0,0,1,0,
				    1,0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,
				    1,0,1,1,0,1,1,1,0,1,1,1,1,1,1,0,
				    1,1,0,1,1,0,0,0,1,1,0,0,0,1,0,1,
				    1,0,0,0,0,1,0,1,0,0,1,1,1,1,1,0};
	u16 g[8];
	int i,j;
	u16 X[8],Y[8],z,temp;

	for(i=0;i<8;i++) 
	{
		g[i] = 0;
        for(j=0;j<16;j++) g[i] ^= G[i][j]<<j;
	}

	for(i=0;i<4;i++) { X[2*i] = (u16) (b3[i]&0xffff);  X[2*i+1] = (u16)  ((b3[i]>>16)&0xffff);}
	for(i=0;i<8;i++)
	{
		z = X[i]&g[i];
		temp = 0;  for(j=0;j<16;j++) temp ^= (z>>j)&1;
		Y[i] = (X[i]>>1) ^ (temp<<15);
	}
	for(i=0;i<4;i++) b1[i] = (u32) Y[2*i] ^ ((u32) Y[2*i+1]<<16) ^ c1[i];
}

void Solve_b3tob2(u32 b3[4],u32 c2[4],u32 b2[4]) 
{

	int sigma[8] = {1,2,7,4,6,3,0,5}; 
	int sigma_in[8]; 
	int i;
	u16 x[8],y[8];

	for(i=0;i<8;i++) sigma_in[sigma[i]] = i; 
	for(i=0;i<4;i++) 
	{ 
		x[2*i]   = (u16) (b3[i]&0xffff); 
		x[2*i+1] = (u16) ((b3[i]>>16)&0xffff); 
	}
	for(i=0;i<8;i++) y[i] = x[sigma_in[i]];
	for(i=0;i<4;i++) b2[i] = (u32) y[2*i] ^ ( ((u32) y[2*i+1]) <<16) ^ c2[i];
}
void doing()
{

    u32 alpha1[4]={0x0078410a,0x4958e900,0x8937001c,0x370066ed};
	u32 alpha4[4]={0xa6ea286f,0xf8fc05fb,0xb7a797b8,0x4aa594c6};
	u32 alpha2[4]={0};
	u32 alpha3[4]={0};
	u32 c1[4]={0xb8f51437,0x7c7e82a1,0x5bd331dc,0x4788e396}; 
	u32 c2[4]={0x286f79c6,0xb7a771ea,0xc8baf8fc,0x054263a9};
	u32 beta1[4]={0};	
	u32 beta2[4]={0};
	u32 beta3[4]={0x71ea286f,0xf8fc0542,0xb7a763b8,0x4aba94c6};
	u32 gamma3[4]={0};
	u32 gamma4[4]={0};
	u32 gamma6[4]={0};
	u32 b3a4[4]={0};
	u32 hb3a4[4]={0};
	u32 v1[4];
	u32 v2[4];
	u32 v3[4];
	u32 v4[4];
	u32 v5[4];
	u32 v6[4];
	u32 v7[4];
	int flag;
	int wt2[256],i,j;
	for(i=0;i<256;i++) { wt2[i]=0; for(j=0;j<8;j++) wt2[i] ^= (i>>j)&1;} 
	double pu[256][256];
	int sign_S[256][256];
	AES_S_pu(pu, sign_S, wt2); 
	double pior,piorr,piorrr,Temp;
	int sign2[2],sign,signn,signnn,temp;
	u32 t[4], T[32],D[32];
	liehunhe(T); 
	u32 x,y,u,z,b2,b22,zz; 
	u32 ru_to_chu[4][256]=
	{   //00x0
	    0x00000000,0x61a1e021,0xa2e32162,0xc342c143,0x45c643c4,0x2467a3e5,0xe72562a6,0x86848287,
		0xeb2d67a9,0x8a8c8788,0x49ce46cb,0x286fa6ea,0xaeeb246d,0xcf4ac44c,0xc08050f,0x6da9e52e,
		0xb6fa2e72,0xd75bce53,0x14190f10,0x75b8ef31,0xf33c6db6,0x929d8d97,0x51df4cd4,0x307eacf5,
		0x5dd749db,0x3c76a9fa,0xff3468b9,0x9e958898,0x18110a1f,0x79b0ea3e,0xbaf22b7d,0xdb53cb5c,
		0x6cf45ce4,0xd55bcc5,0xce177d86,0xafb69da7,0x29321f20,0x4893ff01,0x8bd13e42,0xea70de63,
		0x87d93b4d,0xe678db6c,0x253a1a2f,0x449bfa0e,0xc21f7889,0xa3be98a8,0x60fc59eb,0x15db9ca,
		0xda0e7296,0xbbaf92b7,0x78ed53f4,0x194cb3d5,0x9fc83152,0xfe69d173,0x3d2b1030,0x5c8af011,
		0x3123153f,0x5082f51e,0x93c0345d,0xf261d47c,0x74e556fb,0x1544b6da,0xd6067799,0xb7a797b8,
		0xd8e8b8c8,0xb94958e9,0x7a0b99aa,0x1baa798b,0x9d2efb0c,0xfc8f1b2d,0x3fcdda6e,0x5e6c3a4f,
		0x33c5df61,0x52643f40,0x9126fe03,0xf0871e22,0x76039ca5,0x17a27c84,0xd4e0bdc7,0xb5415de6,
		0x6e1296ba,0xfb3769b,0xccf1b7d8,0xad5057f9,0x2bd4d57e,0x4a75355f,0x8937f41c,0xe896143d,
		0x853ff113,0xe49e1132,0x27dcd071,0x467d3050,0xc0f9b2d7,0xa15852f6,0x621a93b5,0x3bb7394,
		0xb41ce42c,0xd5bd040d,0x16ffc54e,0x775e256f,0xf1daa7e8,0x907b47c9,0x5339868a,0x329866ab,
		0x5f318385,0x3e9063a4,0xfdd2a2e7,0x9c7342c6,0x1af7c041,0x7b562060,0xb814e123,0xd9b50102,
		0x2e6ca5e,0x63472a7f,0xa005eb3c,0xc1a40b1d,0x4720899a,0x268169bb,0xe5c3a8f8,0x846248d9,
		0xe9cbadf7,0x886a4dd6,0x4b288c95,0x2a896cb4,0xac0dee33,0xcdac0e12,0xeeecf51,0x6f4f2f70,
		0xb0d07090,0xd17190b1,0x123351f2,0x7392b1d3,0xf5163354,0x94b7d375,0x57f51236,0x3654f217,
		0x5bfd1739,0x3a5cf718,0xf91e365b,0x98bfd67a,0x1e3b54fd,0x7f9ab4dc,0xbcd8759f,0xdd7995be,
		0x62a5ee2,0x678bbec3,0xa4c97f80,0xc5689fa1,0x43ec1d26,0x224dfd07,0xe10f3c44,0x80aedc65,
		0xed07394b,0x8ca6d96a,0x4fe41829,0x2e45f808,0xa8c17a8f,0xc9609aae,0xa225bed,0x6b83bbcc,
		0xdc242c74,0xbd85cc55,0x7ec70d16,0x1f66ed37,0x99e26fb0,0xf8438f91,0x3b014ed2,0x5aa0aef3,
		0x37094bdd,0x56a8abfc,0x95ea6abf,0xf44b8a9e,0x72cf0819,0x136ee838,0xd02c297b,0xb18dc95a,
		0x6ade0206,0xb7fe227,0xc83d2364,0xa99cc345,0x2f1841c2,0x4eb9a1e3,0x8dfb60a0,0xec5a8081,
		0x81f365af,0xe052858e,0x231044cd,0x42b1a4ec,0xc435266b,0xa594c64a,0x66d60709,0x777e728,
		0x6838c858,0x9992879,0xcadbe93a,0xab7a091b,0x2dfe8b9c,0x4c5f6bbd,0x8f1daafe,0xeebc4adf,
		0x8315aff1,0xe2b44fd0,0x21f68e93,0x40576eb2,0xc6d3ec35,0xa7720c14,0x6430cd57,0x5912d76,
		0xdec2e62a,0xbf63060b,0x7c21c748,0x1d802769,0x9b04a5ee,0xfaa545cf,0x39e7848c,0x584664ad,
		0x35ef8183,0x544e61a2,0x970ca0e1,0xf6ad40c0,0x7029c247,0x11882266,0xd2cae325,0xb36b0304,
		0x4cc94bc,0x656d749d,0xa62fb5de,0xc78e55ff,0x410ad778,0x20ab3759,0xe3e9f61a,0x8248163b,
		0xefe1f315,0x8e401334,0x4d02d277,0x2ca33256,0xaa27b0d1,0xcb8650f0,0x8c491b3,0x69657192,
		0xb236bace,0xd3975aef,0x10d59bac,0x71747b8d,0xf7f0f90a,0x9651192b,0x5513d868,0x34b23849,
		0x591bdd67,0x38ba3d46,0xfbf8fc05,0x9a591c24,0x1cdd9ea3,0x7d7c7e82,0xbe3ebfc1,0xdf9f5fe0,
		//0x00
	    0x00000000,0xa1e02161,0xe32162a2,0x42c143c3,0xc643c445,0x67a3e524,0x2562a6e7,0x84828786,
		0x2d67a9eb,0x8c87888a,0xce46cb49,0x6fa6ea28,0xeb246dae,0x4ac44ccf,0x08050f0c,0xa9e52e6d,
		0xfa2e72b6,0x5bce53d7,0x190f1014,0xb8ef3175,0x3c6db6f3,0x9d8d9792,0xdf4cd451,0x7eacf530,
		0xd749db5d,0x76a9fa3c,0x3468b9ff,0x9588989e,0x110a1f18,0xb0ea3e79,0xf22b7dba,0x53cb5cdb,
		0xf45ce46c,0x55bcc50d,0x177d86ce,0xb69da7af,0x321f2029,0x93ff0148,0xd13e428b,0x70de63ea,
		0xd93b4d87,0x78db6ce6,0x3a1a2f25,0x9bfa0e44,0x1f7889c2,0xbe98a8a3,0xfc59eb60,0x5db9ca01,
		0x0e7296da,0xaf92b7bb,0xed53f478,0x4cb3d519,0xc831529f,0x69d173fe,0x2b10303d,0x8af0115c,
		0x23153f31,0x82f51e50,0xc0345d93,0x61d47cf2,0xe556fb74,0x44b6da15,0x067799d6,0xa797b8b7,
		0xe8b8c8d8,0x4958e9b9,0x0b99aa7a,0xaa798b1b,0x2efb0c9d,0x8f1b2dfc,0xcdda6e3f,0x6c3a4f5e,
		0xc5df6133,0x643f4052,0x26fe0391,0x871e22f0,0x039ca576,0xa27c8417,0xe0bdc7d4,0x415de6b5,
		0x1296ba6e,0xb3769b0f,0xf1b7d8cc,0x5057f9ad,0xd4d57e2b,0x75355f4a,0x37f41c89,0x96143de8,
		0x3ff11385,0x9e1132e4,0xdcd07127,0x7d305046,0xf9b2d7c0,0x5852f6a1,0x1a93b562,0xbb739403,
		0x1ce42cb4,0xbd040dd5,0xffc54e16,0x5e256f77,0xdaa7e8f1,0x7b47c990,0x39868a53,0x9866ab32,
		0x3183855f,0x9063a43e,0xd2a2e7fd,0x7342c69c,0xf7c0411a,0x5620607b,0x14e123b8,0xb50102d9,
		0xe6ca5e02,0x472a7f63,0x05eb3ca0,0xa40b1dc1,0x20899a47,0x8169bb26,0xc3a8f8e5,0x6248d984,
		0xcbadf7e9,0x6a4dd688,0x288c954b,0x896cb42a,0x0dee33ac,0xac0e12cd,0xeecf510e,0x4f2f706f,
		0xd07090b0,0x7190b1d1,0x3351f212,0x92b1d373,0x163354f5,0xb7d37594,0xf5123657,0x54f21736,
		0xfd17395b,0x5cf7183a,0x1e365bf9,0xbfd67a98,0x3b54fd1e,0x9ab4dc7f,0xd8759fbc,0x7995bedd,
		0x2a5ee206,0x8bbec367,0xc97f80a4,0x689fa1c5,0xec1d2643,0x4dfd0722,0x0f3c44e1,0xaedc6580,
		0x07394bed,0xa6d96a8c,0xe418294f,0x45f8082e,0xc17a8fa8,0x609aaec9,0x225bed0a,0x83bbcc6b,
		0x242c74dc,0x85cc55bd,0xc70d167e,0x66ed371f,0xe26fb099,0x438f91f8,0x014ed23b,0xa0aef35a,
		0x094bdd37,0xa8abfc56,0xea6abf95,0x4b8a9ef4,0xcf081972,0x6ee83813,0x2c297bd0,0x8dc95ab1,
		0xde02066a,0x7fe2270b,0x3d2364c8,0x9cc345a9,0x1841c22f,0xb9a1e34e,0xfb60a08d,0x5a8081ec,
		0xf365af81,0x52858ee0,0x1044cd23,0xb1a4ec42,0x35266bc4,0x94c64aa5,0xd6070966,0x77e72807,
		0x38c85868,0x99287909,0xdbe93aca,0x7a091bab,0xfe8b9c2d,0x5f6bbd4c,0x1daafe8f,0xbc4adfee,
		0x15aff183,0xb44fd0e2,0xf68e9321,0x576eb240,0xd3ec35c6,0x720c14a7,0x30cd5764,0x912d7605,
		0xc2e62ade,0x63060bbf,0x21c7487c,0x8027691d,0x04a5ee9b,0xa545cffa,0xe7848c39,0x4664ad58,
		0xef818335,0x4e61a254,0x0ca0e197,0xad40c0f6,0x29c24770,0x88226611,0xcae325d2,0x6b0304b3,
		0xcc94bc04,0x6d749d65,0x2fb5dea6,0x8e55ffc7,0x0ad77841,0xab375920,0xe9f61ae3,0x48163b82,
		0xe1f315ef,0x4013348e,0x02d2774d,0xa332562c,0x27b0d1aa,0x8650f0cb,0xc491b308,0x65719269,
		0x36baceb2,0x975aefd3,0xd59bac10,0x747b8d71,0xf0f90af7,0x51192b96,0x13d86855,0xb2384934,
		0x1bdd6759,0xba3d4638,0xf8fc05fb,0x591c249a,0xdd9ea31c,0x7c7e827d,0x3ebfc1be,0x9f5fe0df,
		//x000
		0x00000000,0xe02161a1,0x2162a2e3,0xc143c342,0x43c445c6,0xa3e52467,0x62a6e725,0x82878684,
		0x67a9eb2d,0x87888a8c,0x46cb49ce,0xa6ea286f,0x246daeeb,0xc44ccf4a,0x50f0c08,0xe52e6da9,
		0x2e72b6fa,0xce53d75b,0xf101419,0xef3175b8,0x6db6f33c,0x8d97929d,0x4cd451df,0xacf5307e,
		0x49db5dd7,0xa9fa3c76,0x68b9ff34,0x88989e95,0xa1f1811,0xea3e79b0,0x2b7dbaf2,0xcb5cdb53,
		0x5ce46cf4,0xbcc50d55,0x7d86ce17,0x9da7afb6,0x1f202932,0xff014893,0x3e428bd1,0xde63ea70,
		0x3b4d87d9,0xdb6ce678,0x1a2f253a,0xfa0e449b,0x7889c21f,0x98a8a3be,0x59eb60fc,0xb9ca015d,
		0x7296da0e,0x92b7bbaf,0x53f478ed,0xb3d5194c,0x31529fc8,0xd173fe69,0x10303d2b,0xf0115c8a,
		0x153f3123,0xf51e5082,0x345d93c0,0xd47cf261,0x56fb74e5,0xb6da1544,0x7799d606,0x97b8b7a7,
		0xb8c8d8e8,0x58e9b949,0x99aa7a0b,0x798b1baa,0xfb0c9d2e,0x1b2dfc8f,0xda6e3fcd,0x3a4f5e6c,
		0xdf6133c5,0x3f405264,0xfe039126,0x1e22f087,0x9ca57603,0x7c8417a2,0xbdc7d4e0,0x5de6b541,
		0x96ba6e12,0x769b0fb3,0xb7d8ccf1,0x57f9ad50,0xd57e2bd4,0x355f4a75,0xf41c8937,0x143de896,
		0xf113853f,0x1132e49e,0xd07127dc,0x3050467d,0xb2d7c0f9,0x52f6a158,0x93b5621a,0x739403bb,
		0xe42cb41c,0x40dd5bd,0xc54e16ff,0x256f775e,0xa7e8f1da,0x47c9907b,0x868a5339,0x66ab3298,
		0x83855f31,0x63a43e90,0xa2e7fdd2,0x42c69c73,0xc0411af7,0x20607b56,0xe123b814,0x102d9b5,
		0xca5e02e6,0x2a7f6347,0xeb3ca005,0xb1dc1a4,0x899a4720,0x69bb2681,0xa8f8e5c3,0x48d98462,
		0xadf7e9cb,0x4dd6886a,0x8c954b28,0x6cb42a89,0xee33ac0d,0xe12cdac,0xcf510eee,0x2f706f4f,
		0x7090b0d0,0x90b1d171,0x51f21233,0xb1d37392,0x3354f516,0xd37594b7,0x123657f5,0xf2173654,
		0x17395bfd,0xf7183a5c,0x365bf91e,0xd67a98bf,0x54fd1e3b,0xb4dc7f9a,0x759fbcd8,0x95bedd79,
		0x5ee2062a,0xbec3678b,0x7f80a4c9,0x9fa1c568,0x1d2643ec,0xfd07224d,0x3c44e10f,0xdc6580ae,
		0x394bed07,0xd96a8ca6,0x18294fe4,0xf8082e45,0x7a8fa8c1,0x9aaec960,0x5bed0a22,0xbbcc6b83,
		0x2c74dc24,0xcc55bd85,0xd167ec7,0xed371f66,0x6fb099e2,0x8f91f843,0x4ed23b01,0xaef35aa0,
		0x4bdd3709,0xabfc56a8,0x6abf95ea,0x8a9ef44b,0x81972cf,0xe838136e,0x297bd02c,0xc95ab18d,
		0x2066ade,0xe2270b7f,0x2364c83d,0xc345a99c,0x41c22f18,0xa1e34eb9,0x60a08dfb,0x8081ec5a,
		0x65af81f3,0x858ee052,0x44cd2310,0xa4ec42b1,0x266bc435,0xc64aa594,0x70966d6,0xe7280777,
		0xc8586838,0x28790999,0xe93acadb,0x91bab7a,0x8b9c2dfe,0x6bbd4c5f,0xaafe8f1d,0x4adfeebc,
		0xaff18315,0x4fd0e2b4,0x8e9321f6,0x6eb24057,0xec35c6d3,0xc14a772,0xcd576430,0x2d760591,
		0xe62adec2,0x60bbf63,0xc7487c21,0x27691d80,0xa5ee9b04,0x45cffaa5,0x848c39e7,0x64ad5846,
		0x818335ef,0x61a2544e,0xa0e1970c,0x40c0f6ad,0xc2477029,0x22661188,0xe325d2ca,0x304b36b,
		0x94bc04cc,0x749d656d,0xb5dea62f,0x55ffc78e,0xd778410a,0x375920ab,0xf61ae3e9,0x163b8248,
		0xf315efe1,0x13348e40,0xd2774d02,0x32562ca3,0xb0d1aa27,0x50f0cb86,0x91b308c4,0x71926965,
		0xbaceb236,0x5aefd397,0x9bac10d5,0x7b8d7174,0xf90af7f0,0x192b9651,0xd8685513,0x384934b2,
		0xdd67591b,0x3d4638ba,0xfc05fbf8,0x1c249a59,0x9ea31cdd,0x7e827d7c,0xbfc1be3e,0x5fe0df9f,
		//000x
		0x00000000,0x2161a1e0,0x62a2e321,0x43c342c1,0xc445c643,0xe52467a3,0xa6e72562,0x87868482,
		0xa9eb2d67,0x888a8c87,0xcb49ce46,0xea286fa6,0x6daeeb24,0x4ccf4ac4,0xf0c0805,0x2e6da9e5,
		0x72b6fa2e,0x53d75bce,0x1014190f,0x3175b8ef,0xb6f33c6d,0x97929d8d,0xd451df4c,0xf5307eac,
		0xdb5dd749,0xfa3c76a9,0xb9ff3468,0x989e9588,0x1f18110a,0x3e79b0ea,0x7dbaf22b,0x5cdb53cb,
		0xe46cf45c,0xc50d55bc,0x86ce177d,0xa7afb69d,0x2029321f,0x14893ff,0x428bd13e,0x63ea70de,
		0x4d87d93b,0x6ce678db,0x2f253a1a,0xe449bfa,0x89c21f78,0xa8a3be98,0xeb60fc59,0xca015db9,
		0x96da0e72,0xb7bbaf92,0xf478ed53,0xd5194cb3,0x529fc831,0x73fe69d1,0x303d2b10,0x115c8af0,
		0x3f312315,0x1e5082f5,0x5d93c034,0x7cf261d4,0xfb74e556,0xda1544b6,0x99d60677,0xb8b7a797,
		0xc8d8e8b8,0xe9b94958,0xaa7a0b99,0x8b1baa79,0xc9d2efb,0x2dfc8f1b,0x6e3fcdda,0x4f5e6c3a,
		0x6133c5df,0x4052643f,0x39126fe,0x22f0871e,0xa576039c,0x8417a27c,0xc7d4e0bd,0xe6b5415d,
		0xba6e1296,0x9b0fb376,0xd8ccf1b7,0xf9ad5057,0x7e2bd4d5,0x5f4a7535,0x1c8937f4,0x3de89614,
		0x13853ff1,0x32e49e11,0x7127dcd0,0x50467d30,0xd7c0f9b2,0xf6a15852,0xb5621a93,0x9403bb73,
		0x2cb41ce4,0xdd5bd04,0x4e16ffc5,0x6f775e25,0xe8f1daa7,0xc9907b47,0x8a533986,0xab329866,
		0x855f3183,0xa43e9063,0xe7fdd2a2,0xc69c7342,0x411af7c0,0x607b5620,0x23b814e1,0x2d9b501,
		0x5e02e6ca,0x7f63472a,0x3ca005eb,0x1dc1a40b,0x9a472089,0xbb268169,0xf8e5c3a8,0xd9846248,
		0xf7e9cbad,0xd6886a4d,0x954b288c,0xb42a896c,0x33ac0dee,0x12cdac0e,0x510eeecf,0x706f4f2f,
		0x90b0d070,0xb1d17190,0xf2123351,0xd37392b1,0x54f51633,0x7594b7d3,0x3657f512,0x173654f2,
		0x395bfd17,0x183a5cf7,0x5bf91e36,0x7a98bfd6,0xfd1e3b54,0xdc7f9ab4,0x9fbcd875,0xbedd7995,
		0xe2062a5e,0xc3678bbe,0x80a4c97f,0xa1c5689f,0x2643ec1d,0x7224dfd,0x44e10f3c,0x6580aedc,
		0x4bed0739,0x6a8ca6d9,0x294fe418,0x82e45f8,0x8fa8c17a,0xaec9609a,0xed0a225b,0xcc6b83bb,
		0x74dc242c,0x55bd85cc,0x167ec70d,0x371f66ed,0xb099e26f,0x91f8438f,0xd23b014e,0xf35aa0ae,
		0xdd37094b,0xfc56a8ab,0xbf95ea6a,0x9ef44b8a,0x1972cf08,0x38136ee8,0x7bd02c29,0x5ab18dc9,
		0x66ade02,0x270b7fe2,0x64c83d23,0x45a99cc3,0xc22f1841,0xe34eb9a1,0xa08dfb60,0x81ec5a80,
		0xaf81f365,0x8ee05285,0xcd231044,0xec42b1a4,0x6bc43526,0x4aa594c6,0x966d607,0x280777e7,
		0x586838c8,0x79099928,0x3acadbe9,0x1bab7a09,0x9c2dfe8b,0xbd4c5f6b,0xfe8f1daa,0xdfeebc4a,
		0xf18315af,0xd0e2b44f,0x9321f68e,0xb240576e,0x35c6d3ec,0x14a7720c,0x576430cd,0x7605912d,
		0x2adec2e6,0xbbf6306,0x487c21c7,0x691d8027,0xee9b04a5,0xcffaa545,0x8c39e784,0xad584664,
		0x8335ef81,0xa2544e61,0xe1970ca0,0xc0f6ad40,0x477029c2,0x66118822,0x25d2cae3,0x4b36b03,
		0xbc04cc94,0x9d656d74,0xdea62fb5,0xffc78e55,0x78410ad7,0x5920ab37,0x1ae3e9f6,0x3b824816,
		0x15efe1f3,0x348e4013,0x774d02d2,0x562ca332,0xd1aa27b0,0xf0cb8650,0xb308c491,0x92696571,
		0xceb236ba,0xefd3975a,0xac10d59b,0x8d71747b,0xaf7f0f9,0x2b965119,0x685513d8,0x4934b238,
		0x67591bdd,0x4638ba3d,0x5fbf8fc,0x249a591c,0xa31cdd9e,0x827d7c7e,0xc1be3ebf,0xe0df9f5f
	}; 
	double youshi;
	int count,num;
	count=0;
	youshi = 0;	
	printf("fixed:\n");
	printf("alpha1: %8x %8x %8x %8x\n", alpha1[3], alpha1[2], alpha1[1], alpha1[0]);
	printf("alpha2: %8x %8x %8x %8x\n", alpha2[3], alpha2[2], alpha2[1], alpha2[0]);
	printf("alpha3: %8x %8x %8x %8x\n", alpha3[3], alpha3[2], alpha3[1], alpha3[0]);
	printf("alpha4: %8x %8x %8x %8x\n", alpha4[3], alpha4[2], alpha4[1], alpha4[0]);
	printf("c1: %8x %8x %8x %8x\n", c1[3], c1[2], c1[1], c1[0]);
	printf("c2: %8x %8x %8x %8x\n", c2[3], c2[2], c2[1], c2[0]);
	printf("unique:\n");	
	Solve_b3tob1(beta3, c1, beta1);
	Solve_b3tob2(beta3, c2, beta2);		
	printf("beta1: %8x %8x %8x %8x\n", beta1[3], beta1[2], beta1[1], beta1[0]);		
	printf("beta2: %8x %8x %8x %8x\n", beta2[3], beta2[2], beta2[1], beta2[0]);	
    printf("beta3: %8x %8x %8x %8x\n", beta3[3], beta3[2], beta3[1], beta3[0]);	
 	pior = 0;
	sign = 1;
    for(i=0;i<4;i++)
	    {
	    b3a4[i]=beta3[i]^alpha4[i];
		v5[i]=beta2[i];
        v6[i]=beta1[i];
     	}			
			Temp = pu_AES_round(alpha1, beta2 ,pu,sign_S,sign2,T,wt2);
			pior += Temp;
			sign *= sign2[0];
		
			Temp = pu_AES_round(v5, beta1 ,pu,sign_S,sign2,T,wt2);
			pior += Temp;
			sign *= sign2[0];
			
            Temp = pu_AES_round(v6, alpha4 ,pu,sign_S,sign2,T,wt2);
			pior += Temp;
			sign *= sign2[0];
		    piorr=pior; 
	        signn=sign; 
	    
	    hb3a4[0]= (b3a4[3]&0xff000000)^(b3a4[2]&0x00ff0000)^(b3a4[1]&0x0000ff00)^(b3a4[0]&0x000000ff); 
        hb3a4[1]= (b3a4[0]&0xff000000)^(b3a4[3]&0x00ff0000)^(b3a4[2]&0x0000ff00)^(b3a4[1]&0x000000ff);
		hb3a4[2]= (b3a4[1]&0xff000000)^(b3a4[0]&0x00ff0000)^(b3a4[3]&0x0000ff00)^(b3a4[2]&0x000000ff); 
		hb3a4[3]= (b3a4[2]&0xff000000)^(b3a4[1]&0x00ff0000)^(b3a4[0]&0x0000ff00)^(b3a4[3]&0x000000ff);  
		if(hb3a4[0]!=0&&hb3a4[1]==0&&hb3a4[2]==0&&hb3a4[3]==0)
		flag = 0;
		else if(hb3a4[0]==0&&hb3a4[1]!=0&&hb3a4[2]==0&&hb3a4[3]==0)
		flag = 1;
		else if(hb3a4[0]==0&&hb3a4[1]==0&&hb3a4[2]!=0&&hb3a4[3]==0)
		flag = 2;
		else if(hb3a4[0]==0&&hb3a4[1]==0&&hb3a4[2]==0&&hb3a4[3]!=0)
		flag = 3;
		else 
		{   printf("no   b1 = ");		for(i=3;i>=0;i--) printf("%08x  ",beta1[i]);	printf("\n");
            printf("     b2 = ");		for(i=3;i>=0;i--) printf("%08x  ",beta2[i]);	printf("\n");		
            printf("     b3 = ");		for(i=3;i>=0;i--) printf("%08x  ",beta3[i]);	printf("\n");
		}

	for(u=1;u<256;u++) 
	{	
	gamma3[3] =  ru_to_chu[flag][u];
	for(i=0;i<4;i++)
	{   
	    v2[i]=beta3[i]^alpha4[i];
		v1[i]=alpha1[i]^v2[i];
	}
	
	    	pior = piorr;
	        sign = signn;
			Temp = pu_AES_round(gamma3, v1 ,pu,sign_S,sign2,T,wt2);
			if(Temp==4321) continue; 
			pior += Temp;
			sign *= sign2[0];
			
			Temp = pu_AES_round(gamma3, alpha4,pu,sign_S,sign2,T,wt2);
			if(Temp==4321) continue; 
			pior += Temp;
			sign *= sign2[0];
			
	        piorrr=pior; 
	        signnn=sign;
		for(x=1;x<256;x++)		
		{
		for(y=1;y<256;y++) 
		{
		for(i=0;i<4;i++)
	{
        gamma4[i]=0;
        gamma6[i]=0;
    }
		    pior=piorrr; 
		    sign=signnn;
			if(x!=y)
			{
			gamma4[flag] = x<<(8*((flag+1) % 32));		
			gamma6[flag] = y<<(8*((flag+1) % 32));
        	
				for(i=0;i<4;i++)
       	{
       	   
		   v3[i]=gamma4[i]^gamma6[i];
		   v4[i]=gamma3[i];
     	}
     	
			Temp = pu_AES_round(v2, gamma4 ,pu,sign_S,sign2,T,wt2);
			if(Temp==4321) continue; 
			pior += Temp;
			sign *= sign2[0];
			
			Temp = pu_AES_round(gamma4, gamma3 ,pu,sign_S,sign2,T,wt2);
			if(Temp==4321) continue; 
			pior += Temp;
			sign *= sign2[0];

			Temp = pu_AES_round(v2, gamma6 ,pu,sign_S,sign2,T,wt2);
			if(Temp==4321) continue; 
			pior += Temp;
			sign *= sign2[0];
			
			Temp = pu_AES_round(gamma6, gamma3 ,pu,sign_S,sign2,T,wt2);
			if(Temp==4321) continue; 
			pior += Temp;
			sign *= sign2[0];
			
			Temp = pu_AES_round(v3, v4 ,pu,sign_S,sign2,T,wt2);
			if(Temp==4321) continue; 
			pior += Temp;
			sign *= sign2[0];
       		pior = sign * pow(2,-pior);	
			youshi += pior;					
			count++;
        }
	}
	}

    }
	if(youshi<0)  { youshi = -youshi;	sign=-1;}
	else sign = 1;

	printf("The correlation is 2^(%3.8f), and the symble is %d\n",log(youshi)/log(2),sign);

	printf("It has %d non-zero linear trails\n",count);

}



int main()
{
 
	doing();
	return 0; 
}
